<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.geeke.databus.dao.ProductionRelationDao">
  <sql id="productionRelationColumns">
    <trim suffixOverrides=",">
      a.id AS "id",
      a.tenant_id AS "tenantId",
      a.master_data_type_id AS "masterDataTypeId",
      a.app_id AS "appId",
      a.data_model AS "dataModel",
      a.remarks AS "remarks",
      a.create_by AS "createBy",
      a.create_date AS "createDate",
      a.update_by AS "updateBy",
      a.update_date AS "updateDate",
      a.del_flag AS "delFlag",
    </trim>
  </sql>
  <sql id="productionRelationJoins">
  </sql>
  <select id="get" resultType="com.geeke.databus.entity.ProductionRelation">
    SELECT
    <include refid="productionRelationColumns" />
    FROM production_relation a
    <include refid="productionRelationJoins" />
    WHERE a.id = #{id}
  </select>
  <select id="getByMasterIdAndtenantId" resultType="com.geeke.databus.entity.ProductionRelation">
    SELECT
    any_value(a.id) AS "id",
    any_value(a.tenant_id) AS "tenantId",
    any_value(a.master_data_type_id) AS "masterDataTypeId",
    any_value(a.remarks) AS "remarks",
    any_value(a.create_by) AS "createBy",
    any_value(a.create_date) AS "createDate",
    any_value(a.update_by) AS "updateBy",
    any_value(a.update_date) AS "updateDate",
    any_value(a.del_flag) AS "delFlag",
    GROUP_CONCAT(
    case  when any_value(a.data_model) = 1
    then CONCAT(any_value(a.app_id))
    end )as appId,
    GROUP_CONCAT(
    case  when any_value(a.data_model) = 0
    then CONCAT(any_value(a.app_id))
    end )as dataModel
    FROM production_relation a
    left join master_data_type mdt on a.master_data_type_id=mdt.id
    left join micro_version mv on a.app_id=mv.id
    left join micro_app ma on ma.id=mv.app_id
    WHERE a.tenant_id = #{tenantId} and a.master_data_type_id = #{masterDataTypeId}
    group by a.tenant_id,a.master_data_type_id
  </select>
  <select id="count" resultType="int">
    SELECT COUNT(*) FROM production_relation a
    <include refid="productionRelationJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <include refid="Common.whereParams" />
    </where>
  </select>
  <select id="listPage" resultType="com.geeke.databus.entity.ProductionRelation">
    SELECT
    any_value(a.id) AS "id",
    any_value(a.tenant_id) AS "tenantId",
    any_value(mdt.name) AS "masterDataTypeName",
    any_value(a.master_data_type_id) AS "masterDataTypeId",
    any_value(a.remarks) AS "remarks",
    any_value(a.create_by) AS "createBy",
    any_value(a.create_date) AS "createDate",
    any_value(a.update_by) AS "updateBy",
    any_value(a.update_date) AS "updateDate",
    any_value(a.del_flag) AS "delFlag",
    GROUP_CONCAT(
    case  when any_value(a.data_model) = 1
    then CONCAT(any_value(ma.name),any_value(mv.name))
    end )as appId,
    GROUP_CONCAT(
    case  when any_value(a.data_model) = 0
    then CONCAT(any_value(ma.name),any_value(mv.name))
    end )as dataModel
    FROM production_relation a
    left join master_data_type mdt on a.master_data_type_id=mdt.id
    left join micro_version mv on a.app_id=mv.id
    left join micro_app ma on ma.id=mv.app_id
    <include refid="productionRelationJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <include refid="Common.whereParams" />
    </where>
    group by a.tenant_id,a.master_data_type_id
    <choose>
      <otherwise>
        ORDER BY any_value(a.update_date) DESC
      </otherwise>
    </choose>

    LIMIT #{limit} OFFSET #{offset}
  </select>
  <select id="listAll" resultType="com.geeke.databus.entity.ProductionRelation">
    SELECT
    <include refid="productionRelationColumns" />
    FROM production_relation a
    <include refid="productionRelationJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <include refid="Common.whereParams" />
    </where>
    <choose>
      <when test="order != null and order != ''">
        ORDER BY ${order}
      </when>
      <otherwise>
        ORDER BY a.update_date DESC
      </otherwise>
    </choose>
  </select>
  <insert id="insert">
    INSERT INTO production_relation(
    <trim suffixOverrides=",">
      id,
      tenant_id,
      master_data_type_id,
      app_id,
      data_model,
      remarks,
      create_by,
      create_date,
      update_by,
      update_date,
      del_flag,
    </trim>
    ) VALUES (
    <trim suffixOverrides=",">
      #{ id },
      #{ tenantId },
      #{ masterDataTypeId },
      #{ appId },
      #{ dataModel },
      #{ remarks },
      #{ createBy },
      #{ createDate },
      #{ updateBy },
      #{ updateDate },
      #{ delFlag },
    </trim>
    )
  </insert>
  <update id="update">
    UPDATE production_relation SET
    <trim suffixOverrides=",">
      tenant_id = #{ tenantId },
      master_data_type_id = #{ masterDataTypeId },
      app_id = #{ appId },
      data_model = #{ dataModel },
      remarks = #{ remarks },
      update_by = #{ updateBy },
      update_date = #{ updateDate },
    </trim>
    WHERE id = #{id}
    and update_date = #{oldUpdateDate}
  </update>
  <update id="delete">
    UPDATE production_relation SET
    update_by = #{updateBy},
    update_date = #{updateDate},
    del_flag = #{DEL_FLAG_DELETE}
    WHERE id = #{id}
    and update_date = #{oldUpdateDate}
  </update>
  <update id="deleteByMasterIdAndtenantId">
      delete from  production_relation where  tenant_id = #{ tenantId } and master_data_type_id = #{ masterDataTypeId }
  </update>
  <insert id="bulkInsert" parameterType="java.util.List">
    INSERT INTO production_relation(
    <trim suffixOverrides=",">
      id,
      tenant_id,
      master_data_type_id,
      app_id,
      data_model,
      remarks,
      create_by,
      create_date,
      update_by,
      update_date,
      del_flag,
    </trim>
    ) VALUES
    <foreach collection="entitys" index="index" item="entity" open="" separator="," close="">
      (
      <trim suffixOverrides=",">
        #{entity.id},
        #{entity.tenantId},
        #{entity.masterDataTypeId},
        #{entity.appId},
        #{entity.dataModel},
        #{entity.remarks},
        #{entity.createBy},
        #{entity.createDate},
        #{entity.updateBy},
        #{entity.updateDate},
        #{entity.delFlag},
      </trim>
      )
    </foreach>
  </insert>
  <update id="bulkUpdate" parameterType="java.util.List">
    UPDATE production_relation
    <set>
      <trim prefix="tenant_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.tenantId}
        </foreach>
      </trim>
      <trim prefix="master_data_type_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.masterDataTypeId}
        </foreach>
      </trim>
      <trim prefix="app_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.appId}
        </foreach>
      </trim>
      <trim prefix="data_model=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.dataModel}
        </foreach>
      </trim>
      <trim prefix="remarks=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.remarks}
        </foreach>
      </trim>
      <trim prefix="update_by=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateBy}
        </foreach>
      </trim>
      <trim prefix="update_date=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateDate}
        </foreach>
      </trim>
    </set>
    WHERE
    <foreach collection="entitys" item="entity" index="index" separator="OR" open="(" close=")">
      id = #{entity.id} and update_date = #{entity.oldUpdateDate}
    </foreach>
  </update>
  <update id="bulkDelete" parameterType="java.util.List">
    UPDATE production_relation
    <set>
      <trim prefix="del_flag=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then 1
        </foreach>
      </trim>
      <trim prefix="update_by=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateBy}
        </foreach>
      </trim>
      <trim prefix="update_date=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateDate}
        </foreach>
      </trim>
    </set>
    WHERE
    <foreach collection="entitys" item="entity" index="index" separator="OR" open="(" close=")">
      id = #{entity.id} and update_date = #{entity.oldUpdateDate}
    </foreach>
  </update>

</mapper>